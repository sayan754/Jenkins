Implementation of a CI/CD workflow


1. Create an EC2 instance (Jenkins Host)

2. Modify the security group

# Create an IAM user with Admin privileges

# Install aws cli
brew install awscli
aws --version
aws configure

# Install eksctl
brew tap weaveworks/tap
brew install weaveworks/tap/eksctl

3. Create an EKS cluster

eksctl create cluster --name cicddemo --node-type t2.large --nodes 1 --nodes-min 1 --nodes-max 1 --region us-east-1 --zones=us-east-1a,us-east-1b

4. Update Kubeconfig on your laptop

aws eks update-kubeconfig --name cicddemo --region us-east-1

5. Set up your Jenkins Host

# Install Java (JDK 17)

sudo su -
apt update -y
apt install openjdk-17-jre -y
java -version

# Install Jenkins

curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
apt-get update
apt-get install jenkins
systemctl start jenkins
systemctl status jenkins

# Install Git
apt install git -y
git --version

# Install Docker & add jenkins to Docker group

apt update -y
apt install docker.io -y
usermod -aG docker jenkins

# Install Docker Pipeline Plugin

# Save Docker Hub account credentials

# Install maven

apt install maven
mvn -version

# Add these to .bashrc
vi .bashrc
export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
export MAVEN_HOME=/usr/share/maven
export PATH=$PATH:$MAVEN_HOME/bin
source ~/.bashrc

## Jenkins-Github Integration

sudo -u jenkins ssh-keygen -t rsa -b 4096 -C "executeoncommand@gmail.com"

# To avoid confirmation prompt in the pipeline
eval "$(ssh-agent -s)"
ssh-add /var/lib/jenkins/.ssh/id_rsa

#Copy the public key into Github

#Save the private key as Jenkins credentials

## Installing Argo CD on Your Cluster
  
#Create namespace
kubectl create namespace argocd
  
# Install Argo CD

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  
kubectl get pods -n argocd

kubectl port-forward svc/argocd-server -n argocd 8080:443

# to retrieve initial admin password
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

# Or reset the admin password
kubectl -n argocd patch secret argocd-secret -p '{"data": {"admin.password": null, "admin.passwordMtime": null}}' -n argocd
kubectl -n argocd rollout restart deployment argocd-server
kubectl -n argocd get pods
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d;echo


# create application in Argo

# Destroy the eks cluster

eksctl delete cluster --name cicddemo --region us-east-1

# Terminate ec2 instances
